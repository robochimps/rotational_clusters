"""Python implementation of the electric dipole moment surface of H2S molecule
from A. A. A. Azzam, L. Lodi, S. N. Yurchenko, J. Tennyson, JQSRT 161, 41-49, 2015

This is Python adaptation of the TROVE function pot_xy2.f90/MLdms2pqr_xy2_coeff
"""

from typing import Callable

import jax
from jax import numpy as np

params1 = [
    0.133600000000e01,
    0.922000000000e02,
    0.00478832298768,
    -0.76979371155700,
    -0.23510259705300,
    0.22148707034900,
    0.39210356641800,
    -0.23531323856200,
    -0.20192058475000,
    -0.04406670432450,
    -0.08155801815960,
    -0.22732589567600,
    -0.42901497958100,
    -0.08342893145700,
    0.32742586865100,
    0.35835788269200,
    0.01101719774270,
    0.86537852828000,
    -0.74141092287700,
    -0.31440493326500,
    0.00000000000000,
    0.84582980447000,
    -0.34837144518800,
    0.47161811756700,
    -0.46659525419400,
    -0.45517814081000,
    0.85332644680100,
    0.34423282322100,
    1.45102983805000,
    1.07338903107000,
    -1.75612011876000,
    -3.34559352047000,
    0.00000000000000,
    2.02849627363000,
    1.19866670605000,
    -9.26719338566000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
]

params2 = [
    0.133600000000e01,
    0.922000000000e02,
    0.000000000000e00,
    0.000000000000e00,
    0.97158658697800,
    -0.15466926924400,
    -0.01035470359510,
    0.63167822571900,
    0.46830660318200,
    -0.19974418476500,
    -0.16094506834900,
    0.14924506451000,
    -0.19313674405600,
    0.25356003627700,
    0.07494271031310,
    0.09784586236700,
    -0.24732253159900,
    0.49789943549500,
    0.13972743185600,
    0.00000000000000,
    -0.29647890379300,
    0.03755065171560,
    0.11894339122000,
    0.15024967971300,
    -0.38093278215600,
    0.39823892560300,
    0.41943697460200,
    -0.07972312399300,
    0.84442182139600,
    -0.18166970891600,
    0.39566287501700,
    0.53960680895200,
    -0.71381799596100,
    -0.77371325694500,
    -0.11891843592600,
    -0.11903065250500,
    0.52299946792400,
    0.14494631365200,
    0.83561928873700,
    -0.11028723925200,
    -0.99393679562700,
    -0.81344284335100,
    -0.26744777730700,
    1.39085188424000,
    0.19471359578300,
    0.36788560167500,
    0.75201022025000,
    1.78047067626000,
    -2.35559011703000,
    -2.47076517208000,
    0.00000000000000,
    4.59039539209000,
    0.51785284265400,
    -7.83392690144000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
    0.00000000000000,
]


def dipole(q, internal_to_cartesian: Callable):
    xyz = internal_to_cartesian(q)  # (no.atoms, 3)

    x0, x1, x2 = xyz
    x1 = x1 - x0
    x2 = x2 - x0

    r1 = np.sqrt(np.sum(x1**2))
    r2 = np.sqrt(np.sum(x2**2))

    n1 = x1 / r1
    n2 = x2 / r2

    alpha = np.arccos(sum(n1 * n2))

    u1 = n1 + n2
    u2 = n2 - n1

    u1 = u1 / np.sqrt(np.sum(u1**2))
    u2 = u2 / np.sqrt(np.sum(u2**2))
    u3 = np.cross(u1, u2)
    tmat = np.array([u1, u2, u3])

    re = params1[0]
    ae = params1[1] * np.pi / 180.0
    y1 = r1 - re
    y2 = r2 - re
    y3 = np.cos(alpha) - np.cos(ae)
    p = [0.0, 0.0, 0.0] + [elem for elem in params1[2:]]
    p = np.array(p)

    v1 = p[3] * y1**1 * y2**0 * y3**0 - p[3] * y1**0 * y2**1 * y3**0

    v2 = (
        p[4] * y1**1 * y2**0 * y3**1
        - p[4] * y1**0 * y2**1 * y3**1
        + p[5] * y1**2 * y2**0 * y3**0
        - p[5] * y1**0 * y2**2 * y3**0
    )

    v3 = (
        p[6] * y1**1 * y2**0 * y3**2
        - p[6] * y1**0 * y2**1 * y3**2
        + p[7] * y1**2 * y2**0 * y3**1
        - p[7] * y1**0 * y2**2 * y3**1
        + p[8] * y1**2 * y2**1 * y3**0
        - p[8] * y1**1 * y2**2 * y3**0
        + p[9] * y1**3 * y2**0 * y3**0
        - p[9] * y1**0 * y2**3 * y3**0
    )

    v4 = (
        p[10] * y1**1 * y2**0 * y3**3
        - p[10] * y1**0 * y2**1 * y3**3
        + p[11] * y1**2 * y2**0 * y3**2
        - p[11] * y1**0 * y2**2 * y3**2
        + p[12] * y1**2 * y2**1 * y3**1
        - p[12] * y1**1 * y2**2 * y3**1
        + p[13] * y1**3 * y2**0 * y3**1
        - p[13] * y1**0 * y2**3 * y3**1
        + p[14] * y1**3 * y2**1 * y3**0
        - p[14] * y1**1 * y2**3 * y3**0
        + p[15] * y1**4 * y2**0 * y3**0
        - p[15] * y1**0 * y2**4 * y3**0
    )

    v5 = (
        p[16] * y1**1 * y2**0 * y3**4
        - p[16] * y1**0 * y2**1 * y3**4
        + p[17] * y1**2 * y2**0 * y3**3
        - p[17] * y1**0 * y2**2 * y3**3
        + p[18] * y1**2 * y2**1 * y3**2
        - p[18] * y1**1 * y2**2 * y3**2
        + p[19] * y1**3 * y2**0 * y3**2
        - p[19] * y1**0 * y2**3 * y3**2
        + p[20] * y1**3 * y2**1 * y3**1
        - p[20] * y1**1 * y2**3 * y3**1
        + p[21] * y1**3 * y2**2 * y3**0
        - p[21] * y1**2 * y2**3 * y3**0
        + p[22] * y1**4 * y2**0 * y3**1
        - p[22] * y1**0 * y2**4 * y3**1
        + p[23] * y1**4 * y2**1 * y3**0
        - p[23] * y1**1 * y2**4 * y3**0
        + p[24] * y1**5 * y2**0 * y3**0
        - p[24] * y1**0 * y2**5 * y3**0
    )

    v6 = (
        p[25] * y1**1 * y2**0 * y3**5
        - p[25] * y1**0 * y2**1 * y3**5
        + p[26] * y1**2 * y2**0 * y3**4
        - p[26] * y1**0 * y2**2 * y3**4
        + p[27] * y1**2 * y2**1 * y3**3
        - p[27] * y1**1 * y2**2 * y3**3
        + p[28] * y1**3 * y2**0 * y3**3
        - p[28] * y1**0 * y2**3 * y3**3
        + p[29] * y1**3 * y2**1 * y3**2
        - p[29] * y1**1 * y2**3 * y3**2
        + p[30] * y1**3 * y2**2 * y3**1
        - p[30] * y1**2 * y2**3 * y3**1
        + p[31] * y1**4 * y2**0 * y3**2
        - p[31] * y1**0 * y2**4 * y3**2
        + p[32] * y1**4 * y2**1 * y3**1
        - p[32] * y1**1 * y2**4 * y3**1
        + p[33] * y1**4 * y2**2 * y3**0
        - p[33] * y1**2 * y2**4 * y3**0
        + p[34] * y1**5 * y2**0 * y3**1
        - p[34] * y1**0 * y2**5 * y3**1
        + p[35] * y1**5 * y2**1 * y3**0
        - p[35] * y1**1 * y2**5 * y3**0
        + p[36] * y1**6 * y2**0 * y3**0
        - p[36] * y1**0 * y2**6 * y3**0
    )

    v7 = (
        p[37] * y1**1 * y2**0 * y3**6
        - p[37] * y1**0 * y2**1 * y3**6
        + p[38] * y1**2 * y2**0 * y3**5
        - p[38] * y1**0 * y2**2 * y3**5
        + p[39] * y1**2 * y2**1 * y3**4
        - p[39] * y1**1 * y2**2 * y3**4
        + p[40] * y1**3 * y2**0 * y3**4
        - p[40] * y1**0 * y2**3 * y3**4
        + p[41] * y1**3 * y2**1 * y3**3
        - p[41] * y1**1 * y2**3 * y3**3
        + p[42] * y1**3 * y2**2 * y3**2
        - p[42] * y1**2 * y2**3 * y3**2
        + p[43] * y1**4 * y2**0 * y3**3
        - p[43] * y1**0 * y2**4 * y3**3
        + p[44] * y1**4 * y2**1 * y3**2
        - p[44] * y1**1 * y2**4 * y3**2
        + p[45] * y1**4 * y2**2 * y3**1
        - p[45] * y1**2 * y2**4 * y3**1
        + p[46] * y1**4 * y2**3 * y3**0
        - p[46] * y1**3 * y2**4 * y3**0
        + p[47] * y1**5 * y2**0 * y3**2
        - p[47] * y1**0 * y2**5 * y3**2
        + p[48] * y1**5 * y2**1 * y3**1
        - p[48] * y1**1 * y2**5 * y3**1
        + p[49] * y1**5 * y2**2 * y3**0
        - p[49] * y1**2 * y2**5 * y3**0
        + p[50] * y1**6 * y2**0 * y3**1
        - p[50] * y1**0 * y2**6 * y3**1
        + p[51] * y1**6 * y2**1 * y3**0
        - p[51] * y1**1 * y2**6 * y3**0
        + p[52] * y1**7 * y2**0 * y3**0
        - p[52] * y1**0 * y2**7 * y3**0
    )

    v8 = (
        p[53] * y1**1 * y2**0 * y3**7
        - p[53] * y1**0 * y2**1 * y3**7
        + p[54] * y1**2 * y2**0 * y3**6
        - p[54] * y1**0 * y2**2 * y3**6
        + p[55] * y1**2 * y2**1 * y3**5
        - p[55] * y1**1 * y2**2 * y3**5
        + p[56] * y1**3 * y2**0 * y3**5
        - p[56] * y1**0 * y2**3 * y3**5
        + p[57] * y1**3 * y2**1 * y3**4
        - p[57] * y1**1 * y2**3 * y3**4
        + p[58] * y1**3 * y2**2 * y3**3
        - p[58] * y1**2 * y2**3 * y3**3
        + p[59] * y1**4 * y2**0 * y3**4
        - p[59] * y1**0 * y2**4 * y3**4
        + p[60] * y1**4 * y2**1 * y3**3
        - p[60] * y1**1 * y2**4 * y3**3
        + p[61] * y1**4 * y2**2 * y3**2
        - p[61] * y1**2 * y2**4 * y3**2
        + p[62] * y1**4 * y2**3 * y3**1
        - p[62] * y1**3 * y2**4 * y3**1
        + p[63] * y1**5 * y2**0 * y3**3
        - p[63] * y1**0 * y2**5 * y3**3
        + p[64] * y1**5 * y2**1 * y3**2
        - p[64] * y1**1 * y2**5 * y3**2
        + p[65] * y1**5 * y2**2 * y3**1
        - p[65] * y1**2 * y2**5 * y3**1
        + p[66] * y1**5 * y2**3 * y3**0
        - p[66] * y1**3 * y2**5 * y3**0
        + p[67] * y1**6 * y2**0 * y3**2
        - p[67] * y1**0 * y2**6 * y3**2
        + p[68] * y1**6 * y2**1 * y3**1
        - p[68] * y1**1 * y2**6 * y3**1
        + p[69] * y1**6 * y2**2 * y3**0
        - p[69] * y1**2 * y2**6 * y3**0
        + p[70] * y1**7 * y2**0 * y3**1
        - p[70] * y1**0 * y2**7 * y3**1
        + p[71] * y1**7 * y2**1 * y3**0
        - p[71] * y1**1 * y2**7 * y3**0
        + p[72] * y1**8 * y2**0 * y3**0
        - p[72] * y1**0 * y2**8 * y3**0
    )

    mu2 = v1 + v2 + v3 + v4 + v5 + v6 + v7 + v8

    re = params2[0]
    ae = params2[1] * np.pi / 180.0

    y1 = r1 - re
    y2 = r2 - re
    y3 = np.cos(alpha) - np.cos(ae)
    q = [0.0, 0.0, 0.0, 0.0, 0.0] + [elem for elem in params2[4:]]
    q = np.array(q)

    v0 = q[5] * y1**0 * y2**0 * y3**0

    v1 = (
        q[6] * y1**0 * y2**0 * y3**1
        + q[7] * y1**1 * y2**0 * y3**0
        + q[7] * y1**0 * y2**1 * y3**0
    )

    v2 = (
        q[8] * y1**0 * y2**0 * y3**2
        + q[9] * y1**1 * y2**0 * y3**1
        + q[9] * y1**0 * y2**1 * y3**1
        + q[10] * y1**1 * y2**1 * y3**0
        + q[11] * y1**2 * y2**0 * y3**0
        + q[11] * y1**0 * y2**2 * y3**0
    )

    v3 = (
        q[12] * y1**0 * y2**0 * y3**3
        + q[13] * y1**1 * y2**0 * y3**2
        + q[13] * y1**0 * y2**1 * y3**2
        + q[14] * y1**1 * y2**1 * y3**1
        + q[15] * y1**2 * y2**0 * y3**1
        + q[15] * y1**0 * y2**2 * y3**1
        + q[16] * y1**2 * y2**1 * y3**0
        + q[16] * y1**1 * y2**2 * y3**0
        + q[17] * y1**3 * y2**0 * y3**0
        + q[17] * y1**0 * y2**3 * y3**0
    )

    v4 = (
        q[18] * y1**0 * y2**0 * y3**4
        + q[19] * y1**1 * y2**0 * y3**3
        + q[19] * y1**0 * y2**1 * y3**3
        + q[20] * y1**1 * y2**1 * y3**2
        + q[21] * y1**2 * y2**0 * y3**2
        + q[21] * y1**0 * y2**2 * y3**2
        + q[22] * y1**2 * y2**1 * y3**1
        + q[22] * y1**1 * y2**2 * y3**1
        + q[23] * y1**2 * y2**2 * y3**0
        + q[24] * y1**3 * y2**0 * y3**1
        + q[24] * y1**0 * y2**3 * y3**1
        + q[25] * y1**3 * y2**1 * y3**0
        + q[25] * y1**1 * y2**3 * y3**0
        + q[26] * y1**4 * y2**0 * y3**0
        + q[26] * y1**0 * y2**4 * y3**0
    )

    v5 = (
        q[27] * y1**0 * y2**0 * y3**5
        + q[28] * y1**1 * y2**0 * y3**4
        + q[28] * y1**0 * y2**1 * y3**4
        + q[29] * y1**1 * y2**1 * y3**3
        + q[30] * y1**2 * y2**0 * y3**3
        + q[30] * y1**0 * y2**2 * y3**3
        + q[31] * y1**2 * y2**1 * y3**2
        + q[31] * y1**1 * y2**2 * y3**2
        + q[32] * y1**2 * y2**2 * y3**1
        + q[33] * y1**3 * y2**0 * y3**2
        + q[33] * y1**0 * y2**3 * y3**2
        + q[34] * y1**3 * y2**1 * y3**1
        + q[34] * y1**1 * y2**3 * y3**1
        + q[35] * y1**3 * y2**2 * y3**0
        + q[35] * y1**2 * y2**3 * y3**0
        + q[36] * y1**4 * y2**0 * y3**1
        + q[36] * y1**0 * y2**4 * y3**1
        + q[37] * y1**4 * y2**1 * y3**0
        + q[37] * y1**1 * y2**4 * y3**0
        + q[38] * y1**5 * y2**0 * y3**0
        + q[38] * y1**0 * y2**5 * y3**0
    )

    v6 = (
        q[39] * y1**0 * y2**0 * y3**6
        + q[40] * y1**1 * y2**0 * y3**5
        + q[40] * y1**0 * y2**1 * y3**5
        + q[41] * y1**1 * y2**1 * y3**4
        + q[42] * y1**2 * y2**0 * y3**4
        + q[42] * y1**0 * y2**2 * y3**4
        + q[43] * y1**2 * y2**1 * y3**3
        + q[43] * y1**1 * y2**2 * y3**3
        + q[44] * y1**2 * y2**2 * y3**2
        + q[45] * y1**3 * y2**0 * y3**3
        + q[45] * y1**0 * y2**3 * y3**3
        + q[46] * y1**3 * y2**1 * y3**2
        + q[46] * y1**1 * y2**3 * y3**2
        + q[47] * y1**3 * y2**2 * y3**1
        + q[47] * y1**2 * y2**3 * y3**1
        + q[48] * y1**3 * y2**3 * y3**0
        + q[49] * y1**4 * y2**0 * y3**2
        + q[49] * y1**0 * y2**4 * y3**2
        + q[50] * y1**4 * y2**1 * y3**1
        + q[50] * y1**1 * y2**4 * y3**1
        + q[51] * y1**4 * y2**2 * y3**0
        + q[51] * y1**2 * y2**4 * y3**0
        + q[52] * y1**5 * y2**0 * y3**1
        + q[52] * y1**0 * y2**5 * y3**1
        + q[53] * y1**5 * y2**1 * y3**0
        + q[53] * y1**1 * y2**5 * y3**0
        + q[54] * y1**6 * y2**0 * y3**0
        + q[54] * y1**0 * y2**6 * y3**0
    )

    v7 = (
        q[55] * y1**0 * y2**0 * y3**7
        + q[56] * y1**1 * y2**0 * y3**6
        + q[56] * y1**0 * y2**1 * y3**6
        + q[57] * y1**1 * y2**1 * y3**5
        + q[58] * y1**2 * y2**0 * y3**5
        + q[58] * y1**0 * y2**2 * y3**5
        + q[59] * y1**2 * y2**1 * y3**4
        + q[59] * y1**1 * y2**2 * y3**4
        + q[60] * y1**2 * y2**2 * y3**3
        + q[61] * y1**3 * y2**0 * y3**4
        + q[61] * y1**0 * y2**3 * y3**4
        + q[62] * y1**3 * y2**1 * y3**3
        + q[62] * y1**1 * y2**3 * y3**3
        + q[63] * y1**3 * y2**2 * y3**2
        + q[63] * y1**2 * y2**3 * y3**2
        + q[64] * y1**3 * y2**3 * y3**1
        + q[65] * y1**4 * y2**0 * y3**3
        + q[65] * y1**0 * y2**4 * y3**3
        + q[66] * y1**4 * y2**1 * y3**2
        + q[66] * y1**1 * y2**4 * y3**2
        + q[67] * y1**4 * y2**2 * y3**1
        + q[67] * y1**2 * y2**4 * y3**1
        + q[68] * y1**4 * y2**3 * y3**0
        + q[68] * y1**3 * y2**4 * y3**0
        + q[69] * y1**5 * y2**0 * y3**2
        + q[69] * y1**0 * y2**5 * y3**2
        + q[70] * y1**5 * y2**1 * y3**1
        + q[70] * y1**1 * y2**5 * y3**1
        + q[71] * y1**5 * y2**2 * y3**0
        + q[71] * y1**2 * y2**5 * y3**0
        + q[72] * y1**6 * y2**0 * y3**1
        + q[72] * y1**0 * y2**6 * y3**1
        + q[73] * y1**6 * y2**1 * y3**0
        + q[73] * y1**1 * y2**6 * y3**0
        + q[74] * y1**7 * y2**0 * y3**0
        + q[74] * y1**0 * y2**7 * y3**0
    )

    v8 = (
        q[75] * y1**0 * y2**0 * y3**8
        + q[76] * y1**1 * y2**0 * y3**7
        + q[76] * y1**0 * y2**1 * y3**7
        + q[77] * y1**1 * y2**1 * y3**6
        + q[78] * y1**2 * y2**0 * y3**6
        + q[78] * y1**0 * y2**2 * y3**6
        + q[79] * y1**2 * y2**1 * y3**5
        + q[79] * y1**1 * y2**2 * y3**5
        + q[80] * y1**2 * y2**2 * y3**4
        + q[81] * y1**3 * y2**0 * y3**5
        + q[81] * y1**0 * y2**3 * y3**5
        + q[82] * y1**3 * y2**1 * y3**4
        + q[82] * y1**1 * y2**3 * y3**4
        + q[83] * y1**3 * y2**2 * y3**3
        + q[83] * y1**2 * y2**3 * y3**3
        + q[84] * y1**3 * y2**3 * y3**2
        + q[85] * y1**4 * y2**0 * y3**4
        + q[85] * y1**0 * y2**4 * y3**4
        + q[86] * y1**4 * y2**1 * y3**3
        + q[86] * y1**1 * y2**4 * y3**3
        + q[87] * y1**4 * y2**2 * y3**2
        + q[87] * y1**2 * y2**4 * y3**2
        + q[88] * y1**4 * y2**3 * y3**1
        + q[88] * y1**3 * y2**4 * y3**1
        + q[89] * y1**4 * y2**4 * y3**0
        + q[90] * y1**5 * y2**0 * y3**3
        + q[90] * y1**0 * y2**5 * y3**3
        + q[91] * y1**5 * y2**1 * y3**2
        + q[91] * y1**1 * y2**5 * y3**2
        + q[92] * y1**5 * y2**2 * y3**1
        + q[92] * y1**2 * y2**5 * y3**1
        + q[93] * y1**5 * y2**3 * y3**0
        + q[93] * y1**3 * y2**5 * y3**0
        + q[94] * y1**6 * y2**0 * y3**2
        + q[94] * y1**0 * y2**6 * y3**2
        + q[95] * y1**6 * y2**1 * y3**1
        + q[95] * y1**1 * y2**6 * y3**1
        + q[96] * y1**6 * y2**2 * y3**0
        + q[96] * y1**2 * y2**6 * y3**0
        + q[97] * y1**7 * y2**0 * y3**1
        + q[97] * y1**0 * y2**7 * y3**1
        + q[98] * y1**7 * y2**1 * y3**0
        + q[98] * y1**1 * y2**7 * y3**0
        + q[99] * y1**8 * y2**0 * y3**0
        + q[99] * y1**0 * y2**8 * y3**0
    )

    mu1 = (v0 + v1 + v2 + v3 + v4 + v5 + v6 + v7 + v8) * np.sin(alpha)
    mu3 = 0

    return np.dot(np.array([mu1, mu2, mu3]), tmat)


batch_dipole = jax.jit(jax.vmap(dipole, in_axes=(0, None)), static_argnums=1)